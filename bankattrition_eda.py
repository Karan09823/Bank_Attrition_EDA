# -*- coding: utf-8 -*-
"""BankAttrition_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hdn2Kz99mD1BxHyTFW-qHjdAq0NYpxpB
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files
uploaded=files.upload()

df=pd.read_excel("Bank_attrition_Data (3).xlsx")

df.head()

df.columns

# standardize column names
df.columns = (
    df.columns
      .str.lower()
      .str.replace(' ', '_')
)

df.columns

df.isnull().sum()

# fill na
df.dropna(subset=['gender'])
# salary
df['salary']=df['salary'].fillna(df['salary'].median())
# balance
df['balance']=df['balance'].fillna(0)
# satisfaction_score
df['satisfaction_score']=df['satisfaction_score'].fillna(df['satisfaction_score'].median())
# card_type
df['card_type']=df['card_type'].fillna(df['card_type'].mode()[0])

df.isnull().sum()

df['card_type']=df['card_type'].str.upper().str.strip()

# numeric columns
numeric_columns=df.select_dtypes(include=['number']).columns.tolist()
print(numeric_columns)

from textwrap import indent
# unique values in each numeric columns
unique_counts={col:df[col].nunique() for col in numeric_columns}
print(unique_counts)

# outlier in salary
df['salary'].plot(kind='box',vert=False)
plt.title('Salary Distribution')
plt.show()

# remove outliers
Q1=df['salary'].quantile(0.25)
Q3=df['salary'].quantile(0.75)
IQR=Q3-Q1
lower_bound=Q1-1.5*IQR
upper_bound=Q3+1.5*IQR

#outliers
salary_outliers=df[(df['salary']<lower_bound) | (df['salary']>upper_bound)]
print("Outliers Customers Based on Salary")
print(salary_outliers['salary'])
print()

Outliers_count=((df['salary']<lower_bound) | (df['salary']>upper_bound)).sum()
print("COunt of Outliers based on salary:",Outliers_count)

# capping the outliers
df['salary']=np.where(df['salary']>upper_bound,upper_bound,df['salary'])
df['salary']=np.where(df['salary']<lower_bound,lower_bound,df['salary'])

# salary distribution -Outliers Handled
df['salary'].plot(kind='box',vert=False)
plt.title("Salary Distribution - Outliers Handled")
plt.show()

# mean,median
print("Salary - mean,median,mode")
mean_salary=round(np.mean(df['salary']))
print("mean:",mean_salary)
median_salary=round(np.median(df['salary']))
print("median:",median_salary)
print()

print("Balance - mean,median,mode")
mean_balance=round(np.mean(df['balance']))
print("mean:",mean_balance)
median_balance=round(np.median(df['balance']))
print("median:",median_balance)
print()

print("Credit Score - mean,median,mode")
mean_credit_score=round(np.mean(df['credit_score']))
print("mean:",mean_credit_score)
median_credit_score=round(np.median(df['credit_score']))
print("median:",median_credit_score)
print()

# count of category
gender_count=df['gender'].value_counts()
print("Gender Count:",gender_count)

card_type_count=df['card_type'].value_counts()
print("\nCard Type Count:",card_type_count)


df['loan_status']=df['hasloan'].map({0:"No Loan",1:"Has Loan"})
loan_status_count=df['loan_status'].value_counts()
print("\nLoan Status Count:",loan_status_count)

df['fd_status']=df['hasfd'].map({0:"No FD",1:"Has FD"})
FD_status_count=df['fd_status'].value_counts()
print("\nFD Status Count:",FD_status_count)

# Gender Distribution
sns.countplot(data=df,x='gender')
plt.title("Gender Distribution")
plt.xlabel("Gender")
plt.show()

# card type distribution
sns.countplot(data=df,x='card_type')
plt.title("Card Type Distribution")
plt.xlabel("Card Type")
plt.show()

# Loan Status Distribution
sns.countplot(data=df,x='loan_status')
plt.title("Loan Status Distribution")
plt.xlabel("Loan Status")
plt.show()

# Fixed Deposit Distribution
sns.countplot(data=df,x='fd_status')
plt.title("Fixed Deposit Distribution")
plt.xlabel("Fixed Deposit Status")
plt.show()

# Balance distribution outliers check
df['balance'].plot(kind='box')
plt.title("Balance Distribution")
plt.show()

# check relationship b/w credit score and balance
df_sample=df.sample(n=200,random_state=42)
sns.scatterplot(data=df_sample,x='credit_score',y='balance')
plt.xlabel("Credit Score")
plt.ylabel("Balance")
plt.title("Credit Score vs Balance")
plt.show()

# Debt to Income Ration
# (Balance + (HasLoan * salary * 0.3))/salary

df['debt_to_income_ratio']=(df['balance']+(df['hasloan']*df['salary']*0.3))/df['salary']

df[['first_name','debt_to_income_ratio']].head()

# Loyalty score calculation
# (Tenure * satisfaction score)/(1 + count of complains)
df['loyalty_score']=(df['tenure']*df['satisfaction_score'])/(1 + df['count_of_complains'])
df[['first_name','loyalty_score']].head()

# Average number of complaints per state
df['state_avg_complains']=df.groupby("state")['count_of_complains'].transform('mean')

# compare individual complaint count  to their state's average
df['above_state_avg_complains']=df['state_avg_complains']<df['count_of_complains']
df['high_complainer']=df['above_state_avg_complains'].astype(int) # convert it into 1 if true else 0

# categorize customers by salary
df['salary_category']=np.where(
    df['salary']<=50000,'Low',
    np.where(
        df['salary']<=100000,'Medium',
        np.where(
            df['salary']<=150000,'High',
            np.where(
                df['salary']<=200000,'Very High',
                'Above 2 Lakhs'
            )
        )
    )
)

sns.countplot(data=df.sort_values('salary'),x='salary_category')
plt.title("Salary Category Distribution")
plt.xlabel("Salary Category")
plt.show()

# Average Number of Products Based on Customer Tenure
tenure_product_analysis=df.groupby('tenure')['num_of_products'].mean()
print("Average Number of Products Based on Customer Tenure:")
print(tenure_product_analysis)

# Grouping by churn status  to analyze salary and product usage
churn_analysis=df.groupby('exited')[['salary','num_of_products']].mean()
print("Grouping by churn status  to analyze salary and product usage:")
print(churn_analysis)

# compare Average salary for exited vs retained customer
sns.barplot(data=df.replace({'exited':{1:'Exited',0:'Stayed'}}),x='exited',y='salary',hue='exited',palette=['green','red'],errorbar=None)
plt.title("Average Salary for Exited vs Retained Customers")
plt.xlabel("")
plt.ylabel("Average Salary")
plt.show()

# compare Average number of products for exited and retained customer
sns.barplot(data=df.replace({'exited':{
    0:'Stayed',
    1:'Exited'
}}),x='exited',y='num_of_products',palette=['green','red'],hue='exited',errorbar=None)
plt.xlabel('')
plt.ylabel('Number of Products')
plt.title('Average Number of Products for Exited and Retained Customers')
plt.show()

# visualization of customer churn vs retention proportion
churn_counts=df['exited'].value_counts()
labels=['Retained','Exited']
plt.pie(churn_counts,labels=labels,autopct='%1.1f%%')
plt.title('Customer Churn Proportion')
plt.show()

# churn variation across states
region_churn_count=df.groupby(df['state'])['exited'].sum()
plt.pie(region_churn_count,labels=region_churn_count.index,autopct='%1.1f%%')
plt.title('Churn Variation Across States')
plt.show()

# Age vs Number of Customers(churned vs Non churned)
churned_count=df[df['exited']==1].groupby('age').size().reset_index(name='count')
non_churned_count=df[df['exited']==0].groupby('age').size().reset_index(name='count')

churned_count['status']='Churned'
non_churned_count['status']='Non-churned'

combined_df=pd.concat([churned_count,non_churned_count])
sns.scatterplot(data=combined_df,x='age',y='count',hue='status',palette={'Churned':'red','Non-churned':'green'})
plt.title('Age Vs Number of Customers - churned vs Non-churned')
plt.xlabel('Age')
plt.ylabel('Number of Customer')
plt.show()

# Distribution of age by churn status
sns.boxplot(data=df.replace({0:'Stayed',1:'Exited'}),x='exited',y='age')
plt.title('Distribution of Age by Churn status')
plt.xlabel('Churn status')
plt.ylabel('Age')
plt.show()

# churn distribution by gender -> who exited male or female?
churn_counts = df[df['exited']==1].groupby('gender').size().reset_index(name='churned_count')
total_counts = df.groupby('gender').size().reset_index(name='total_count')

merged_counts = pd.merge(churn_counts, total_counts, on='gender')
merged_counts['churn_percentage'] = (merged_counts['churned_count'] / merged_counts['total_count']) * 100

sns.barplot(data=merged_counts, x='gender', y='churn_percentage', hue='gender')
plt.title('Churn Distribution by Gender')
plt.xlabel('Gender')
plt.ylabel('Churn Percentage')
plt.show()

# Analyze customer churn rates across different states and genders
churned_customers = df[df['exited'] == 1].groupby(['state', 'gender']).size().reset_index(name='churned_count')
total_customer = df.groupby(['state', 'gender']).size().reset_index(name='total_count')

merged_churn_data = pd.merge(churned_customers, total_customer, on=['state', 'gender'])
merged_churn_data['churn_rate'] = (merged_churn_data['churned_count'] / merged_churn_data['total_count']) * 100


plt.figure(figsize=(12, 6))
sns.barplot(data=merged_churn_data, x='state', y='churn_rate', hue='gender',edgecolor='black')
plt.title('Churn Rate Across Different States and Gender')
plt.xlabel('State')
plt.ylabel('Churn Rate (%)')
plt.show()

# relationship b/w Income Group - Salary and churn rate
#income ranges
bins = [0, 30000, 50000, 70000, 100000, 150000, df['salary'].max()]
labels = ['<30K', '30K-50K', '50K-70K', '70K-100K', '>100K', 'Above 150K']

df['income_group'] = pd.cut(df['salary'], bins=bins, labels=labels)

# total customers in each income group
total_customers_by_income = df.groupby('income_group',observed=True)['exited'].count()

#churned customers in each income group
churned_customers_by_income = df.groupby('income_group',observed=True)['exited'].sum()

#churn rate by income group
churn_rate_by_income = (churned_customers_by_income / total_customers_by_income) * 100

plt.figure(figsize=(10, 6))
churn_rate_by_income.plot(kind='bar')
plt.title('Churn Rate by Income Group')
plt.xlabel('Income Group')
plt.ylabel('Churn Rate (%)')
plt.show()

# average satisfaction score for age groups
age_bins=[18,30,45,60,100]
age_labels=['18-30','31-45','46-60','60+']

df['age_group']=pd.cut(df['age'],bins=age_bins,labels=age_labels)

churned_customer=df[df['exited']==1]
avg_satisfaction_churned=churned_customer.groupby('age_group',observed=True)['satisfaction_score'].mean().reset_index(name='avg_satisfaction_score')
sns.barplot(data=avg_satisfaction_churned,x='age_group',y='avg_satisfaction_score')
plt.title('Average Satisfaction Score for Age Groups')
plt.xlabel('Age Group')
plt.ylabel('Average Satisfaction Score')
plt.show()

# relationship by employment type for churned and non-churned customers
plt.figure(figsize=(10,5))
df_plot = df.copy()
df_plot['churn_status'] = df_plot['exited'].replace({0:"Stayed",1:"Exited"})

sns.countplot(data=df_plot, x='employment_type', hue='churn_status', edgecolor='black')
plt.title('Relationship by Employment Type for Churned and Non-Churned Customers')
plt.xlabel('Employment Type')
plt.ylabel('Number of customers')
plt.show()

# churn rates across regions and genders
grouped_data=df.groupby(['region','gender'])
churned_customer=grouped_data['exited'].sum()
total_customer=grouped_data['exited'].count()

churn_rate_region_gender=(churned_customer/total_customer)* 100
#convert it into dataframe
churn_rate_region_gender = churn_rate_region_gender.reset_index(name='churn_rate')

sns.barplot(data=churn_rate_region_gender,x='region',y='churn_rate',hue='gender',edgecolor='black')
plt.title('Churn Rates Across Regions and Gender')
plt.xlabel('Region')
plt.ylabel('Churn Rate (%)')
plt.show()

# churn rate by state
grouped_data=df.groupby('state')
churned_customer=grouped_data['exited'].sum()
total_customer=grouped_data['exited'].count()
churn_rate_state=(churned_customer/total_customer)*100
churn_rate_state=churn_rate_state.reset_index(name='churn_rate')

sns.barplot(data=churn_rate_state,x='state',y='churn_rate',edgecolor='black')
plt.title('Churn Rate by State')
plt.xlabel('State')
plt.ylabel('Churn Rate (%)')
plt.show()

# credit card distribution among churned customers
churned_customers = df[df['exited'] == 1].copy()
churned_customers['credit_card_status'] = churned_customers['hascrcard'].replace({0:"No Credit Card", 1:"Have Credit Card"})

sns.countplot(data=churned_customers, x='credit_card_status', edgecolor='black')
plt.title('Credit Card Distribution Among Churned Customers')
plt.xlabel('Credit Card Status')
plt.ylabel('Number of Customers')
plt.show()

# churned vs non-churned customers credit card relationship
overall_customers = df.copy()
overall_customers['credit_card_status'] = overall_customers['hascrcard'].replace({0: "No Credit Card", 1: "Have Credit Card"})
overall_customers['churn_status'] = overall_customers['exited'].replace({0: "Stayed", 1: "Exited"})

sns.countplot(
    data=overall_customers,
    x='credit_card_status',
    hue='churn_status',
    edgecolor='black'
)
plt.title('Churned vs Non-Churned Customers by Credit Card Ownership')
plt.xlabel('Credit Card Status')
plt.ylabel('Number of Customers')
plt.show()

# credit card type distribution across churn status
overall_customers = df.copy()
overall_customers['churn_status'] = overall_customers['exited'].replace({0: "Stayed", 1: "Exited"})
card_type_customer_distribution=overall_customers.groupby(['card_type','churn_status']).size().reset_index(name='count')

sns.barplot(data=card_type_customer_distribution,x='card_type',y='count',hue='churn_status',edgecolor='black')
plt.title('Credit Card Type Distribution Across Churn Status')
plt.xlabel('Credit Card Type')
plt.ylabel('Number of Customers')
plt.show()

# loan ownership vs churn
overall_customers = df.copy()
overall_customers['churn_status'] = overall_customers['exited'].replace({0: "Stayed", 1: "Exited"})
overall_customers['hasloan'] = overall_customers['hasloan'].replace({0: "No Loan", 1: "Has Loan"})
sns.countplot(data=overall_customers,x='hasloan',hue='churn_status',edgecolor='black')
plt.title('Loan Ownership vs Churn')
plt.xlabel('Loan Ownership')
plt.ylabel('Number of Customers')
plt.show()

# number of products vs churn customers relationship
exited_customers=df[df['exited']==1]
card_type_churned=exited_customers.groupby('card_type',observed=True).size().reset_index(name='count')
sns.barplot(data=card_type_churned,x='card_type',y='count',edgecolor='black')
plt.title('Number of Products vs Churn Customers')
plt.xlabel('Card Type')
plt.ylabel('Number of Customers')
plt.show()

# product distribution ( credit card,loan,Fixed Deposit) vs churn status

crcard = df[df['hascrcard'] == 1].groupby('exited').size()
loan = df[df['hasloan'] == 1].groupby('exited').size()
fd = df[df['hasfd'] == 1].groupby('exited').size()

product_dist = pd.DataFrame({
    'Credit Card': crcard,
    'Loan': loan,
    'Fixed Deposit': fd
}).reset_index()


product_dist['churn_status'] = product_dist['exited'].replace({0: 'Stayed', 1: 'Exited'})


ax = product_dist.set_index('churn_status')[['Credit Card', 'Loan', 'Fixed Deposit']].plot(
    kind='bar', figsize=(7, 5), edgecolor='black'
)


for container in ax.containers:
    ax.bar_label(container, fontsize=9, padding=3)

plt.title('Product Distribution Across Churn Status')
plt.xlabel('Churn Status')
plt.ylabel('Number of Customers')
plt.legend(title='Products')
plt.tight_layout()
plt.show()

# Average product usage by tenure groups across churn status

tenure_bins = list(range(0, 41, 5))
tenure_labels = [f'{i}<={i+5}' for i in range(0, 36, 5)]

df['tenure_group'] = pd.cut(df['tenure'], bins=tenure_bins, labels=tenure_labels, right=False)


plt.figure(figsize=(10, 4))
sns.barplot(
    data=df,
    x='tenure_group',
    y='num_of_products',
    hue='exited',
    palette='muted',
    errorbar=None
)
plt.xlabel('Tenure Group (Years)')
plt.ylabel('Average Number of Products')
plt.title('Tenure Group vs Avg Number of Products by Churn Status')
plt.legend(title='Exited', labels=['No', 'Yes'])
plt.tight_layout()
plt.show()

df.columns

# Average number of products by credit score range and churn status


max_score = df['credit_score'].max()
last_bin = max(1200, max_score + 1)
credit_bins = [200, 400, 600, 800, 1000, last_bin]
credit_labels = ['200-399', '400-599', '600-799', '800-999', '1000+']


df['credit_score_range'] = pd.cut(df['credit_score'], bins=credit_bins, labels=credit_labels, right=False)


df['churn_status'] = df['exited'].replace({0: 'Stayed', 1: 'Exited'})


plt.figure(figsize=(10, 5))
ax = sns.barplot(
    data=df,
    x='credit_score_range',
    y='num_of_products',
    hue='churn_status',
    palette='coolwarm',
    errorbar=None
)


for p in ax.patches:
    height = p.get_height()
    if pd.notnull(height) and height > 0:
        ax.text(
            x=p.get_x() + p.get_width() / 2,
            y=height + (0.02 * height),
            s=f'{height:.2f}',
            ha='center',
            va='bottom',
            fontsize=9
        )


plt.title('Average Number of Products by Credit Score Range and Churn Status')
plt.xlabel('Credit Score Range')
plt.ylabel('Average Number of Products')
plt.legend(title='Churn Status')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))

sns.scatterplot(data=df,x='satisfaction_score',y='point_earned',hue='churn_status',palette=['green','red'])

plt.title('Satisfaction vs Points Earned by Churn')
plt.xlabel('Satisfaction score')
plt.ylabel('Points earned')
plt.show()

# satisfaction score by churn
sns.histplot(data=df,x='satisfaction_score',hue='churn_status',bins=10,multiple='stack',palette=['green','red'],edgecolor='black',legend=True)
plt.title('Satisfaction Score Distribution by Churn')
plt.xlabel('satisfaction score')
plt.ylabel('number of customers')
plt.show()

# churn distribution among complainers
complainers=df[df['complain']==1]
churn_among_customer=complainers['churn_status'].value_counts(normalize=True)
plt.pie(churn_among_customer,labels=churn_among_customer.index,autopct='%1.1f%%',startangle=90)
plt.title('Churn Distribution Among Complainers')
plt.show()

# Salary vs Balance by Churn status

sample_df = df.sample(n=1000, random_state=42)


sns.scatterplot(
    data=sample_df,
    x='salary',
    y='balance',
    hue='churn_status',
    palette=['green','red'],
    alpha=0.6
)


plt.title('Salary vs Balance by Churn Status')
plt.xlabel('Salary')
plt.ylabel('Balance')
plt.show()

# average balance by number of products and churn status
grouped=df.groupby(['num_of_products','churn_status'])['balance'].mean().reset_index()

sns.barplot(data=grouped,x='num_of_products',y='balance',hue='churn_status')
plt.title('Average Balance by Number of Products and Churn Status')
plt.xlabel('Number of products')
plt.ylabel('Average Balance')
plt.show()

#churn distribution among FD holders
FD_customers=df[df['hasfd']==1]
proportions=FD_customers['churn_status'].value_counts(normalize=True)

plt.pie(proportions,labels=proportions.index,autopct='%1.1f%%')
plt.title('Churn Distribution Among FD Holders')
plt.show()

